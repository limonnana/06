package com.limonnana.domain;

import static com.limonnana.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvestmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentAllPropertiesEquals(Investment expected, Investment actual) {
        assertInvestmentAutoGeneratedPropertiesEquals(expected, actual);
        assertInvestmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentAllUpdatablePropertiesEquals(Investment expected, Investment actual) {
        assertInvestmentUpdatableFieldsEquals(expected, actual);
        assertInvestmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentAutoGeneratedPropertiesEquals(Investment expected, Investment actual) {
        assertThat(actual)
            .as("Verify Investment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentUpdatableFieldsEquals(Investment expected, Investment actual) {
        assertThat(actual)
            .as("Verify Investment relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a ->
                assertThat(a.getStartAmount())
                    .as("check startAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getStartAmount())
            )
            .satisfies(a ->
                assertThat(a.getCurrentValue())
                    .as("check currentValue")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCurrentValue())
            )
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentUpdatableRelationshipsEquals(Investment expected, Investment actual) {
        // empty method
    }
}
